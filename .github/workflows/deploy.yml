name: Deploy

on:
  push:
    branches:
      - main
      - prod

permissions:
  id-token: write #Allows GitHub to issue an OIDC token
  contents: read #Allows GitHub to checkout code
                 #default permission when no permissions block is present

jobs:

  test-lint:
    uses: ./.github/workflows/test-lint.yml
    name: Test and Lint
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: [test-lint]
    steps:

      # Preparation
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set the terraform workspace variable
        run: |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
          echo "staging" > .workspace
          fi

      # AWS authentication â€“ chaining roles to the prod account
      - name: Assume the initial role in mgmt account using OIDC 
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ vars.OIDC_GH_ACTIONS_ROLE_MGMT }}
          role-session-name: gh-actions-mgmt-${{ github.actor }}
          aws-region: us-east-1
      - name: Assume the CI/CD Role in prod account
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ vars.CICD_GH_ACTIONS_ROLE_PROD }}
          role-session-name: gh-actions-prod-${{ github.actor }}
          aws-region: us-east-1
          role-chaining: true     

      # Build, tag and push Docker images to AWS ECR          
      - name: Login to ECR using the assumed role credentials 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1       
      - name: Build and push the API app image
        uses: docker/build-push-action@v6.16.0
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_APP_REPOSITORY_NAME }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_APP_REPOSITORY_NAME }}:latest
      - name: Build and push the API proxy image
        uses: docker/build-push-action@v6.16.0
        with:
          context: ./proxy
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_PROXY_REPOSITORY_NAME }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_PROXY_REPOSITORY_NAME }}:latest

      # Apply final config to prod account       
      - name: Terraform Apply
        env:
            TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
            TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
            #TESTING: Pass domain from GH Actions Variable
            TF_VAR_custom_domain: ${{ vars.TF_VAR_CUSTOM_DOMAIN }}
        run: |
            # Point Terraform at the backend state
            WORKSPACE=$(cat .workspace)
            cd infra/
            docker compose run --rm terraform -chdir=deploy/ init   -input=false
            docker compose run --rm terraform -chdir=deploy/ workspace select -or-create "$WORKSPACE" 
            # Point Terraform at the latest images
            export TF_VAR_ecr_app_image="${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_APP_REPOSITORY_NAME }}:latest"
            export TF_VAR_ecr_proxy_image="${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_PROXY_REPOSITORY_NAME }}:latest"
            docker compose run --rm terraform -chdir=deploy/ apply -auto-approve